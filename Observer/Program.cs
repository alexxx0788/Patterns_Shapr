using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Observer.structure;

namespace Observer
{
    /// <summary>
    /// http://metanit.com/sharp/patterns/3.2.php
    /// Паттерн "Наблюдатель" (Observer) представляет поведенческий шаблон проектирования, который использует отношение "один ко многим".
    /// В этом отношении есть один наблюдаемый объект и множество наблюдателей. И при изменении наблюдаемого объекта автоматически происходит оповещение всех наблюдателей.
    /// Данный паттерн еще называют Publisher-Subscriber (издатель-подписчик), поскольку отношения издателя и подписчиков характеризуют действие данного паттерна: подписчики подписываются email-рассылку определенного сайта. 
    /// 
    /// В данном примере можно рассмотреть паттерн Observer на примере отношения между биржей и сущностями что следят за ней Bank и Broker.
    /// Мы оперируем двумя главными интерфейсами IObserveble в качестве объекта за которым будут наблюдать будет биржа и IObserver в качестве реализация объектов что будут наблюдать выступают Bank и Broker.
    /// В программе мы создаем главный объект за которым будут наблюдать это биржа, затем создаем наблюдателей, 
    /// во время создания наблюдателя мы передаем наблюдаемы объект и прямо в конструкторе происходит подписка банка или брокера на активность биржи.
    /// Биржа имеет главный метод Market которая который условно производит торги и затем оповещает всех подпищиков.
    /// Каждый подпизик имеет возможность отписаться от наблюдаемого объекта StopTrade.
    /// </summary>
    class Program
    {
        static void Main(string[] args)
        {
            Stock stock = new Stock();
            Bank bank = new Bank("ЮнитБанк", stock);
            Broker broker = new Broker("Иван Иваныч", stock);
            // имитация торгов
            stock.Market();
            // брокер прекращает наблюдать за торгами
            broker.StopTrade();
            // имитация торгов
            stock.Market();
            Console.Read();
        }
    }
}
